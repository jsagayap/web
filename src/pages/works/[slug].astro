---
import { getCollection, type CollectionEntry, render } from "astro:content";
import { Image } from "astro:assets";

import Layout from "../../layouts/Layout.astro";

export async function getStaticPaths() {
  const works = await getCollection("works");
  return works.map((work) => ({
    params: { slug: work.id },
    props: { work },
  }));
}

type Props = {
  work: CollectionEntry<"works">;
};

const { work } = Astro.props;
const { Content } = await render(work);

const tech = work.data.technologies || [];
---

<Layout title={work.data.title} url={`/works/${work.id}`}>
  <div class="hero">
    <Image
      src={work.data.image}
      width={1920}
      height={1080}
      alt="Hero article"
      role="presentation"
      loading="eager"
    />
  </div>
  <div class="content">
    <h1 class="article-header">{work.data.title}</h1>
    <div class="render">
      <div class="work-info">
        <div class="row">
          <p class="row-title">Category</p>
          <p class="row-text">{work.data.category}</p>
        </div>
        <div class="row">
          <p class="row-title">Roles</p>
          <div class="tags">
            {work.data.tags.map((tag) => <p class="row-text">{tag}</p>)}
          </div>
        </div>
        {
          tech.length != 0 ? (
            <div class="row">
              <p class="row-title">Technologies</p>
              <div class="tags">
                {tech.map((tag) => (
                  <p class="row-text">{tag}</p>
                ))}
              </div>
            </div>
          ) : undefined
        }
      </div>
      <Content />
    </div>
  </div>
</Layout>

<style is:global>
  /* TODO: Remove global if solution for render-based styling is found */
  .render {
    margin-bottom: 5rem;
  }
  .render > p {
    font-size: 1.125rem;
    line-height: 2;
  }
  .render > hr {
    border-top: 0;
    border-bottom-color: rgba(68, 34, 0, 0.25);
    margin: 2rem 0;
    clear: both;
  }
  .render a {
    color: inherit;
    font-weight: 600;
    text-decoration: none;

    &:hover {
      text-decoration: underline;
    }
  }
  .render img {
    width: 100%;
    height: 100%;
    box-shadow: 0 0 16px rgba(0, 0, 0, 0.075);
  }
  .render > p:has(em) {
    font-size: 1rem;
    line-height: 1.25;
  }
  .render > p > em {
    opacity: 0.75;
    display: block;
    margin-top: 1rem;
    margin-bottom: 2rem;
  }
  .render .grid > p {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    grid-template-rows: minmax(100px, auto);
    gap: 0.5rem;
  }
  .render .grid.grid-4 > p {
    grid-template-columns: repeat(4, 1fr);
    grid-template-rows: minmax(100px, auto);
  }
  @media screen and (max-width: 768px) {
    .render img {
      width: calc(100% + 4rem);
      margin: 0 -2rem;
    }
    .render .grid {
      width: calc(100% + 4rem);
      margin: 0 -2rem;
    }
    .render .grid img {
      width: 100%;
      margin: 0;
    }
    .render .grid.grid-4 > p {
      grid-template-columns: repeat(2, 1fr);
      grid-template-rows: minmax(100px, auto);
    }
  }
</style>

<style>
  .content {
    max-width: 1100px;
    margin: 0 auto;
  }
  .hero {
    width: 100%;
    aspect-ratio: 27 / 9;
    margin-bottom: 3rem;
    overflow: hidden;
    background-color: rgba(68, 34, 0, 0.05);
  }
  .hero img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  .article-header {
    font-size: 4rem;
    margin: 0;
  }
  .article-info {
    margin: 0.5rem 0 2rem;
    opacity: 0.5;
  }
  .work-info {
    display: flex;
    flex-direction: column;
    width: 16rem;
    margin: 0 0 5rem 5rem;
    gap: 1.5rem;
    float: right;
    clear: right;

    .row {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;

      .row-title {
        font-size: 1rem;
        font-weight: 600;
        opacity: 0.5;
        margin: 0;
      }
      .row-text {
        font-size: 1.125rem;
        margin: 0;
      }
    }
    .tags {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
    }
  }
  @media screen and (max-width: 1310px) {
    .content {
      padding-left: 2rem;
      padding-right: 2rem;
    }
  }
  @media screen and (max-width: 768px) {
    .content {
      padding-left: 2rem;
      padding-right: 2rem;
    }
    .work-info {
      width: 100%;
      margin: 0 0 2rem 0;
      padding-bottom: 2rem;
      border-bottom: 1px solid rgba(68, 34, 0, 0.25);
    }
  }
</style>
